<?php

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\NodeInterface;

// log channel
define('APPCREDS_SYNC_APIC_LOG_CHANNEL', 'apic_app');

function appcreds_sync_log_error($message, $context = array()) {
  \Drupal::logger(APPCREDS_SYNC_APIC_LOG_CHANNEL)->error($message, $context);
}

//
// settings keys
//
const APPCREDS_SYNC_SETTINGS_KEY = 'apic_addon_appcreds_sync.settings';

const APPCREDS_SYNC_INITIAL_ACCESS_TOKEN_KEY = 'initial_access_token';
const APPCREDS_SYNC_CLIENT_HOST_KEY = 'client_host';
const APPCREDS_SYNC_CLIENT_PATH_KEY = 'client_path';
const APPCREDS_SYNC_TEST_KEY = 'enable_test_analytics';
const APPCREDS_SYNC_TEST_URL_KEY = 'test_analytics_url';
const APPCREDS_SYNC_TEST_CLIENT_ID_KEY = 'test_analytics_client_id';

const APPCREDS_SYNC_ENABLE_BEARER_ACCESS_TOKEN_KEY = 'enable_bearer_access_token';
const APPCREDS_SYNC_BEARER_TOKEN_PATH_KEY = 'bearer_token_path';
const APPCREDS_SYNC_BEARER_TOKEN_CLIENT_ID_KEY = 'bearer_token_client_id';
const APPCREDS_SYNC_BEARER_TOKEN_CLIENT_SECRET_KEY = 'bearer_token_client_secret';
const APPCREDS_SYNC_BEARER_TOKEN_USER_KEY = 'bearer_token_user';
const APPCREDS_SYNC_BEARER_TOKEN_PASSWORD_KEY = 'bearer_token_password';
const APPCREDS_SYNC_BEARER_TOKEN_SCOPE_KEY = 'bearer_token_scope';

function apic_addon_appcreds_sync_config_settings() {
    return \Drupal::service('config.factory')->get(APPCREDS_SYNC_SETTINGS_KEY);
}

/**
 * @param $key
 * @return array
 */
function apic_addon_appcreds_sync_config_value($key) {
    $config = apic_addon_appcreds_sync_config_settings();
    if (isset($config)) {
        $value = $config->get($key);
        if (isset($value)) {
            return array(true, $value);
        }
    }
    return array(false, '');
}

function apic_addon_appcreds_sync_config_display_value($key) {
    $arr = apic_addon_appcreds_sync_config_value($key);
    list($hassetting, $value) = $arr;
    if ($hassetting) return $value;
    return 'no config value';
}

// access token config
function apic_addon_appcreds_sync_initial_access_token() {
    list($hassetting, $value) = apic_addon_appcreds_sync_config_value(APPCREDS_SYNC_INITIAL_ACCESS_TOKEN_KEY);
    if ($hassetting) return $value;
    return '';
}

function apic_addon_appcreds_sync_client_host() {
    list($hassetting, $value) = apic_addon_appcreds_sync_config_value(APPCREDS_SYNC_CLIENT_HOST_KEY);
    if ($hassetting) return $value;
    return '';
}

function apic_addon_appcreds_sync_client_path() {
    list($hassetting, $value) = apic_addon_appcreds_sync_config_value(APPCREDS_SYNC_CLIENT_PATH_KEY);
    if ($hassetting) return $value;
    return '';
}

// test analytics
function apic_addon_appcreds_sync_test() {
    list($hassetting, $value) = apic_addon_appcreds_sync_config_value(APPCREDS_SYNC_TEST_KEY);
    if ($hassetting) return $value;
    return false;
}

function apic_addon_appcreds_sync_test_url() {
    list($hassetting, $value) = apic_addon_appcreds_sync_config_value(APPCREDS_SYNC_TEST_URL_KEY);
    if ($hassetting) return $value;
    return '';
}

function apic_addon_appcreds_sync_test_x_ibm_client_id() {
    list($hassetting, $value) = apic_addon_appcreds_sync_config_value(APPCREDS_SYNC_TEST_CLIENT_ID_KEY);
    if ($hassetting) return $value;
    return '';
}

// bearer token config
function apic_addon_appcreds_sync_enable_bearer_access_token() {
    list($hassetting, $value) = apic_addon_appcreds_sync_config_value(APPCREDS_SYNC_ENABLE_BEARER_ACCESS_TOKEN_KEY);
    if ($hassetting) return $value;
    return false;
}

function apic_addon_appcreds_sync_bearer_token_path() {
    list($hassetting, $value) = apic_addon_appcreds_sync_config_value(APPCREDS_SYNC_BEARER_TOKEN_PATH_KEY);
    if ($hassetting) return $value;
    return '';
}

function apic_addon_appcreds_sync_bearer_token_client_id() {
    list($hassetting, $value) = apic_addon_appcreds_sync_config_value(APPCREDS_SYNC_BEARER_TOKEN_CLIENT_ID_KEY);
    if ($hassetting) return $value;
    return '';
}

function apic_addon_appcreds_sync_bearer_token_client_secret() {
    list($hassetting, $value) = apic_addon_appcreds_sync_config_value(APPCREDS_SYNC_BEARER_TOKEN_CLIENT_SECRET_KEY);
    if ($hassetting) return $value;
    return '';
}

function apic_addon_appcreds_sync_bearer_token_user() {
    list($hassetting, $value) = apic_addon_appcreds_sync_config_value(APPCREDS_SYNC_BEARER_TOKEN_USER_KEY);
    if ($hassetting) return $value;
    return '';
}

function apic_addon_appcreds_sync_bearer_token_password() {
    list($hassetting, $value) = apic_addon_appcreds_sync_config_value(APPCREDS_SYNC_BEARER_TOKEN_PASSWORD_KEY);
    if ($hassetting) return $value;
    return '';
}

function apic_addon_appcreds_sync_bearer_token_scope() {
    list($hassetting, $value) = apic_addon_appcreds_sync_config_value(APPCREDS_SYNC_BEARER_TOKEN_SCOPE_KEY);
    if ($hassetting) return $value;
    return '';
}

// end config

function build_dyna_client_url() {
    $dyna_client_host = apic_addon_appcreds_sync_client_host();
    $dyna_client_path = apic_addon_appcreds_sync_client_path();

    return $dyna_client_host . $dyna_client_path;
}

function build_bearer_token_url() {
    $token_host = apic_addon_appcreds_sync_client_host();
    $token_path = apic_addon_appcreds_sync_bearer_token_path();

    return $token_host . $token_path;
}

/**
 * Implements hook_help().
 * @param $route_name
 * @param RouteMatchInterface $route_match
 * @return string
 */
function apic_addon_appcreds_sync_help($route_name, RouteMatchInterface $route_match) {
    switch ($route_name) {
        case 'help.page.apic_addon_appcreds_sync':

            $output = '';
            $output .= '<h3>' . t('About') . '</h3>';
            $output .= '<p>' . t('Sync APIC App Creds to Oauth Provider.') . '</p>';

            $output .= '<p><b>' . APPCREDS_SYNC_INITIAL_ACCESS_TOKEN_KEY . '</b>=' . apic_addon_appcreds_sync_config_display_value(APPCREDS_SYNC_INITIAL_ACCESS_TOKEN_KEY) . '</p>';
            $output .= '<p><b>' . APPCREDS_SYNC_CLIENT_HOST_KEY . '</b>=' . apic_addon_appcreds_sync_config_display_value(APPCREDS_SYNC_CLIENT_HOST_KEY) . '</p>';
            $output .= '<p><b>' . APPCREDS_SYNC_CLIENT_PATH_KEY . '</b>=' . apic_addon_appcreds_sync_config_display_value(APPCREDS_SYNC_CLIENT_PATH_KEY) . '</p>';
            $output .= '<p><b>' . APPCREDS_SYNC_TEST_KEY . '</b>=' . apic_addon_appcreds_sync_config_display_value(APPCREDS_SYNC_TEST_KEY) . '</p>';
            $output .= '<p><b>' . APPCREDS_SYNC_TEST_URL_KEY . '</b>=' . apic_addon_appcreds_sync_config_display_value(APPCREDS_SYNC_TEST_URL_KEY) . '</p>';
            $output .= '<p><b>' . APPCREDS_SYNC_TEST_CLIENT_ID_KEY . '</b>=' . apic_addon_appcreds_sync_config_display_value(APPCREDS_SYNC_TEST_CLIENT_ID_KEY) . '</p>';

            return $output;

        default:
    }
}

/**
 * @param $app
 * @param $path
 */
function appcreds_post_analytics($app, $path) {

    $client = \Drupal::httpClient();

    $url = apic_addon_appcreds_sync_test_url() . $path;
    $x_ibm_client_id = apic_addon_appcreds_sync_test_x_ibm_client_id();

    try {
        $resp = $client->post($url, [
            'json' => $app,
            'verify' => false,
            'headers' => [
                'Content-Type' => 'application/json',
                'Accept' => 'application/json',
                'X-IBM-Client-Id' => $x_ibm_client_id,
            ]
        ]);

        $b = $resp->getStatusCode();
    } catch (\GuzzleHttp\Exception\RequestException $e) {
        appcreds_sync_log_error($e->getMessage());
    }
}

/**
 * @return array
 */
function access_token() {
    //
    // could be preconfigured initial access token
    // or bearer access token
    //
    if (apic_addon_appcreds_sync_enable_bearer_access_token()) {
        return bearer_access_token();

    } else {
        return initial_access_token();
    }
}

function initial_access_token() {
    $tok = apic_addon_appcreds_sync_initial_access_token();

    $tokarr = [];
    $tokarr['token_type'] = 'inital_access_token';
    $tokarr['access_token'] = $tok;

    return $tokarr;
}

/**
 * @return array
 */
function bearer_access_token() {

    $client_id = apic_addon_appcreds_sync_bearer_token_client_id();
    $client_secret = apic_addon_appcreds_sync_bearer_token_client_secret();

    $username = apic_addon_appcreds_sync_bearer_token_user();
    $password = apic_addon_appcreds_sync_bearer_token_password();

  $scope = apic_addon_appcreds_sync_bearer_token_scope();

    // post
    $form_params = [
        'grant_type' => 'password',
        'client_id' => $client_id,
        'client_secret' => $client_secret,
        'username' => $username,
        'password' => $password,
        'scope' => $scope
    ];

    try {
        $client = \Drupal::httpClient();

        $resp = $client->post(build_bearer_token_url(), [
            'form_params' => $form_params,
            'verify' => false,
            'headers' => [
                'Accept' => 'application/json'
            ]
        ]);

        $statusCode = $resp->getStatusCode();
        if (!is_status_code_ok($statusCode)) {
            return [];
        }

        $b = $resp->getBody()->getContents();

        // $b is json encoded string
        $json = json_decode($b);

        $token_type = $json->{'token_type'};
        $access_token = $json->{'access_token'};

        // return token array
        $tokarr = [];
        if (isset($token_type)) {
            $tokarr['token_type'] = $token_type;
        }

        if (isset($access_token)) {
            $tokarr['access_token'] = $access_token;
        }

        return $tokarr;

    } catch (\GuzzleHttp\Exception\RequestException $e) {
        appcreds_sync_log_error($e->getMessage());
    }

    return [];
}

function encode_bearer_token_header($token) {
    return sprintf("Bearer %s", $token);
}

function is_status_code_ok($status_code) {
    return $status_code >= 200 && $status_code < 300;
}

/**
 * @param array $rh
 * @param string $token
 * @return array
 */
function appcreds_dyna_client_create($rh, $token) {

    try {
        $client = \Drupal::httpClient();

        $hdrs = [
            'Authorization' => encode_bearer_token_header($token),
            'Accept' => 'application/json'
        ];

        if (apic_addon_appcreds_sync_test()) {
            $hdrs['X-IBM-Client-Id'] = apic_addon_appcreds_sync_test_x_ibm_client_id();
        }

        $resp = $client->post(build_dyna_client_url(), [
            'json' => $rh,
            'verify' => false,
            'headers' => $hdrs
        ]);

        $statusCode = $resp->getStatusCode();
        if (!is_status_code_ok($statusCode)) {
            return [];
        }

        $b = $resp->getBody()->getContents();
        $json = json_decode($b);

        $resp_client_id = $json->{'clientId'};
        $resp_secret = $json->{'secret'};
        $resp_token = $json->{'registrationAccessToken'};

        $resp = []; // response array

        if (isset($resp_client_id)) {
            $resp['clientId'] = $resp_client_id;
        }

        if (isset($resp_secret)) {
            $resp['secret'] = $resp_secret;
        }

        if (isset($resp_token)) {
            $resp['registrationAccessToken'] = $resp_token;
        }

        return $resp;

    } catch (\GuzzleHttp\Exception\RequestException $e) {
        appcreds_sync_log_error($e->getMessage());
    }

    return [];
}

/**
 * @param string $clientid
 * @param string $token
 * @return bool
 */
function appcreds_dyna_client_delete($clientid, $token) {
    if (!isset($clientid)) {
        return false;
    }

    if (!isset($token)) {
        return false;
    }

    $url = build_dyna_client_url();
    if (!isset($url)) {
        return false;
    }

    if ($url[strlen($url) - 1] == '/') {
        $url = $url . $clientid;
    } else {
        $url = $url . '/' . $clientid;
    }

    try {
        $client = \Drupal::httpClient();

        $hdrs = [
            'Authorization' => encode_bearer_token_header($token)
        ];

        if (apic_addon_appcreds_sync_test()) {
            $hdrs['X-IBM-Client-Id'] = apic_addon_appcreds_sync_test_x_ibm_client_id();
        }

        $resp = $client->delete($url, [
            'verify' => false,
            'headers' => $hdrs
        ]);

        $statusCode = $resp->getStatusCode();
        if (!is_status_code_ok($statusCode)) {
            return false;
        }

        return true;

    } catch (\GuzzleHttp\Exception\RequestException $e) {
        appcreds_sync_log_error($e->getMessage());
    }

    return false;
}

function make_registration_access_token_key($appname, $clientid) {
    return 'apic-appcreds-sync.' . $appname . '-' . $clientid;
}

function save_registration_access_token($key, $token) {
    \Drupal::state()->set($key, $token);
}

function get_registration_access_token($key) {
    $token = \Drupal::state()->get($key);

    if (isset($token)) {
        return $token;
    }

    return 'token-not-found-for-' . $key;
}

function delete_registration_access_token($key) {
    if (isset($key)) {
        \Drupal::state()->delete($key);
    }
}

function make_credentials_key($appname, $credentialsId) {
    return 'apic-appcreds-sync.' . $appname . '-' . 'creds' . '-'. $credentialsId;
}

function save_credentials_clientid($key, $clientId) {
    if (isset($key) && isset($clientId)) {
        \Drupal::state()->set($key, $clientId);
    }
}

function get_credentials_clientid($key) {
    if (isset($key)) {
        $clientid = \Drupal::state()->get($key);

        if (isset($clientid)) {
            return $clientid;
        }

        return 'clientid-not-found-for-' . $key;
    }

    return 'clientid-not-found-for-' . 'unknown-key';
}

function delete_credentials_clientid($key) {
    if (isset($key)) {
        \Drupal::state()->delete($key);
    }
}

/**
 * Triggered when an application is created
 *
 * @param NodeInterface $node
 *   The Drupal node representing this application
 * @param array $app
 *   The array of data returned by API Manager
 */
function apic_addon_appcreds_sync_apic_app_create(NodeInterface $node, $app) {

    if (!isset($app) || empty($app)) return;

    $appcredurls = $app['app_credential_urls'];
    $credids = parse_credential_ids($appcredurls);

    $cid = "";
    if (isset($credids) && !empty($credids)) {
        $cid = $credids[0];
    }

    $appname = $app['name'];
    $redirectendpoints = $app['redirect_endpoints'];
    $clientid = $app['client_id'];
    $clientsecret = $app['client_secret'];

    $cc = appcreds_client_create($appname, $clientid, $clientsecret, $redirectendpoints, $cid);

    $ok = $cc[0];
    $tokenkey = $cc[1];
    $regtoken = $cc[2];

    // debug: post input to analytics
    if ($ok && apic_addon_appcreds_sync_test()) {
        $keyval = [];
        $keyval['reg-token-key'] = $tokenkey;
        $keyval['reg-token'] = $regtoken;

        $app['clientreg'] = $keyval;

        $credkey = make_credentials_key($appname, $cid);
        $app['credkey'] = $credkey;
        $app['clientid-by-credid'] = get_credentials_clientid($credkey);

        appcreds_post_analytics($app, '/appnew');
    }
}

/**
 * Triggered when an application is updated
 *
 * @param NodeInterface $node
 *   The Drupal node representing this application
 * @param array $app
 *   The array of data returned by API Manager
 */
function apic_addon_appcreds_sync_apic_app_update(NodeInterface $node, $app) {

    // get credslist for an app...
    // for each cred in credslist update client-id with a new list of redirect-uri's

    // if all data is required for update
    // for each cred in credlist get client data
    // update client data with new redirect-uris

    if (apic_addon_appcreds_sync_test()) {
        appcreds_post_analytics($app, '/appupdate');
    }
}

/**
 * Triggered when an application is deleted
 *
 * @param NodeInterface $node
 *   The Drupal node representing this application
 * @param array $app
 *   The array of data returned by API Manager (could be empty)
 * @param string $appId
 *   The ID of the application that has been deleted
 */
function apic_addon_appcreds_sync_apic_app_delete(NodeInterface $node, $app, $appId) {

    if (!isset($app) || empty($app)) {
        appcreds_sync_log_error(sprintf('%s: application input parameter not set... no app-delete-sync performed...', __FUNCTION__));
        return;
    }

    if (!isset($appId)) {
        appcreds_sync_log_error(sprintf('%s: appId input parameter not set... no app-delete-sync performed...', __FUNCTION__));
        return;
    }

    $appcredurls = $app['app_credential_urls'];
    $credids = parse_credential_ids($appcredurls);

    $debugdata = [];

    if (isset($credids) && !empty($credids)) {

        foreach ($credids as $cid) {
            // query for credential by id, get client_id
            if (apic_addon_appcreds_sync_test()) {
                array_push($debugdata, $cid);
            }

            try {
                $crednode = Drupal\apic_app\Entity\Credentials::load($cid);
                if (!isset($crednode)) {
                    appcreds_sync_log_error(sprintf('%s: failed to load credential with id = %s', __FUNCTION__, $cid));
                    continue;
                }

                if (apic_addon_appcreds_sync_test()) {
                    array_push($debugdata, "cid loaded...");
                }

                if ($crednode instanceof \Drupal\Core\Entity\EntityInterface) {
                    if (apic_addon_appcreds_sync_test()) {
                        array_push($debugdata, 'crednode is entity-interface');
                    }
                }

                if ($crednode instanceof \Drupal\apic_app\CredentialsInterface) {

                    if (apic_addon_appcreds_sync_test()) {
                        array_push($debugdata, 'crednode is credentials-interface');
                    }

                    $credsarr = $crednode->toArray();
                    if (!isset($credsarr)) {
                        appcreds_sync_log_error(sprintf('%s: failed to convert crednode to array, creds-id = %s', __FUNCTION__, $cid));
                        continue;
                    }

                    if (apic_addon_appcreds_sync_test()) {
                        array_push($debugdata, $credsarr);
                    }

                    // get saved access token
                    $clientid = $credsarr['client_id'];
                    $appname = $app['name'];

                    if (!isset($clientid)) {
                        appcreds_sync_log_error(sprintf('%s: client-id is not set for credential with id = %s', __FUNCTION__, $cid));
                        continue;
                    }

                    if (!isset($appname)) {
                        appcreds_sync_log_error(sprintf('%s: name is not set for application with id = %s', __FUNCTION__, $appId));
                        continue;
                    }

                    $cd = appcreds_client_delete($appname, $clientid, $cid, $debugdata);
                }

            } catch (\Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException $e) {
                appcreds_sync_log_error($e->getMessage());

                if (apic_addon_appcreds_sync_test()) {
                    array_push($debugdata, $e);
                }

            } catch (\Drupal\Component\Plugin\Exception\PluginNotFoundException $e) {
                appcreds_sync_log_error($e->getMessage());

                if (apic_addon_appcreds_sync_test()) {
                    array_push($debugdata, $e);
                }
            }
        }
    }

    if (apic_addon_appcreds_sync_test()) {
        if (!empty($debugdata)) $app['debugdata'] = $debugdata;
        appcreds_post_analytics($app, '/appdelete');
    }
}

/**
 * Triggered when a new set of credentials is created for an application
 *
 * @param NodeInterface $node
 *   The Drupal node representing this application
 * @param array $data
 *   The array of data returned by API Manager (could be empty)
 * @param string $credId
 *   The ID of the credentials
 */
function apic_addon_appcreds_sync_apic_app_creds_create(NodeInterface $node, $data, $credId) {
    $debugdata = [];

    if (!isset($node)) {
        // complain
        return;
    }

    if (!isset($data)) {
        // complain
        return;
    }

    if (!isset($credId)) {
        // complain
        return;
    }

    // $data contains new credential: client_id, client_secret, etc
    // $appId contains application-id
    // $credId contains credential-id that is the same as in the $data array

    $client_id = $data['client_id'];
    $client_secret = $data['client_secret'];

    // load application by id to get app-name, redirect-uri's
    $app = appcreds_load_application($node);
    $appname = appcreds_get_application_name($app);
    $redirecturis = appcreds_get_redirect_endpoints($app);

    if (apic_addon_appcreds_sync_test()) {
        $debugdata['var-app'] = $app;
        $debugdata['lapp-application-name'] = $appname;
        $debugdata['lapp-redirect-uris'] = $redirecturis;
        $debugdata['arg-data'] = $data;
        $debugdata['arg-credId'] = $credId;
    }

    // create new client cred
    $crt = appcreds_client_create($appname, $client_id, $client_secret, $redirecturis, $credId);
    $crtok = $crt[0];

    if (apic_addon_appcreds_sync_test()) {
        appcreds_post_analytics($data, '/credsnew');
    }
}

/**
 * Triggered when a set of credentials is updated for an application
 *
 * @param NodeInterface $node
 *   The Drupal node representing this application
 * @param array $data
 *   The array of data returned by API Manager (could be empty)
 * @param string $credId
 *   The ID of the credentials
 */
function apic_addon_appcreds_sync_apic_app_creds_update(NodeInterface $node, $data, $credId) {
    if (apic_addon_appcreds_sync_test()) {
        appcreds_post_analytics($data, '/credsupdate');
    }
}

/**
 * Triggered when a set of credentials is deleted for an application
 *
 * @param NodeInterface $node
 *   The Drupal node representing this application
 * @param array $data
 *   The array of data returned by API Manager (could be empty)
 * @param string $credId
 *   The ID of the credentials
 */
function apic_addon_appcreds_sync_apic_app_creds_delete(NodeInterface $node, $data, $credId) {

    $debugdata = [];

    $client_id = $data["client_id"];

    $app = appcreds_load_application($node);
    $appname = appcreds_get_application_name($app);

    $del = appcreds_client_delete($appname, $client_id, $credId, $debugdata);
    $delok = $del[0];

    if (apic_addon_appcreds_sync_test()) {
        $debugdata['arg-data'] = $data;
        $debugdata['lapp-name'] = $appname;
        $debugdata['rc-delok'] = $delok;

        appcreds_post_analytics($debugdata, '/credsdelete');
    }
}

/**
 * Triggered when a credential client ID is reset
 *
 * @param NodeInterface $node
 *   The Drupal node representing this application
 * @param array $data
 *   The array of data returned by API Manager (could be empty)
 * @param string $appId
 *   The application ID
 * @param string $credId
 *   The credential ID
 */
function apic_addon_appcreds_sync_apic_app_clientid_reset(NodeInterface $node, $data, $appId, $credId) {

    $debugdata = [];

    // load application by id to get app-name, redirect-uri's
    $app = appcreds_load_application($node);
    $appname = appcreds_get_application_name($app);
    $redirecturis = appcreds_get_redirect_endpoints($app);

    if (apic_addon_appcreds_sync_test()) {
        $debugdata['var-app'] = $app;
        $debugdata['lapp-application-name'] = $appname;
        $debugdata['lapp-redirect-uris'] = $redirecturis;
        $debugdata['arg-data'] = $data;
        $debugdata['arg-credId'] = $credId;
    }

    // delete existing client cred
    $credkey = make_credentials_key($appname, $credId);
    $old_client_id = get_credentials_clientid($credkey);

    if (apic_addon_appcreds_sync_test()) {
        $debugdata['credkey'] = $credkey;
        $debugdata['oldclientid'] = $old_client_id;
    }

    $del = appcreds_client_delete($appname, $old_client_id, $credId, $debugdata);
    $delok = $del[0];

    // create new client cred
    // we do not check if previous delete call failed
    // it is possible that updated version of the module is installed after
    // existing clients are already synced up to rh without tracking client ids

    $new_client_id = $data['client_id'];
    $new_client_secret = $data['client_secret'];

    $crt = appcreds_client_create($appname, $new_client_id, $new_client_secret, $redirecturis, $credId);
    $crtok = $crt[0];

    if (apic_addon_appcreds_sync_test()) {
        appcreds_post_analytics($debugdata, '/clientidreset');
    }
}

/**
 * Triggered when a credential client secret is reset
 *
 * @param NodeInterface $node
 *   The Drupal node representing this application
 * @param array $data
 *   The array of data returned by API Manager (could be empty)
 * @param string $appId
 *   The application ID
 * @param string $credId
 *   The credential ID
 */
function apic_addon_appcreds_sync_apic_app_clientsecret_reset(NodeInterface $node, $data, $appId, $credId) {
    $debugdata = [];

    if (isset($data) && apic_addon_appcreds_sync_test()) {
        $debugdata['arg-data'] = $data;
    }

    if (isset($appId) && apic_addon_appcreds_sync_test()) {
        $debugdata['arg-appid'] = $appId;
    }

    if (isset($credId) && apic_addon_appcreds_sync_test()) {
        $debugdata['arg-credid'] = $credId;
    }

    // $data contains new credential: client_id, client_secret, etc
    // $appId contains application-id
    // $credId contains credential-id

    $client_id = $data['client_id'];
    $client_secret = $data['client_secret'];

    // load application by id to get app-name, redirect-uri's
    $app = appcreds_load_application($node);
    $appname = appcreds_get_application_name($app);
    $redirecturis = appcreds_get_redirect_endpoints($app);

    if (apic_addon_appcreds_sync_test()) {
        $debugdata['var-app'] = $app;
        $debugdata['lapp-application-name'] = $appname;
        $debugdata['lapp-redirect-uris'] = $redirecturis;
    }

    $del = appcreds_client_delete($appname, $client_id, $credId, $debugdata);
    $delok = $del[0];

    if ($delok) {
        // create new client cred
        $crt = appcreds_client_create($appname, $client_id, $client_secret, $redirecturis, $credId);
        $crtok = $crt[0];
    }

    if (apic_addon_appcreds_sync_test()) {
        appcreds_post_analytics($debugdata, '/clientsecretreset');
    }
}

/**
 * @param NodeInterface $node
 * @return array
 */
function appcreds_load_application(NodeInterface $node): array {
    if (isset($node)) {
        try {
            return $node->toArray();
        } catch (\Drupal\Core\Entity\EntityStorageException $e) {
            appcreds_sync_log_error($e->getMessage());
        }
    }
    return [];
}

function appcreds_get_application_name($app): string {
    $application_name_arr = $app['application_name'];

    if (isset($application_name_arr) && !empty($application_name_arr)) {
        $application_name = array_shift($application_name_arr);
        return $application_name["value"];
    }

    return "";
}

function appcreds_get_redirect_endpoints($app): array {
    $endpoints = [];
    $application_redirect_endpoints_arr = $app["application_redirect_endpoints"];

    if (isset($application_redirect_endpoints_arr) && !empty($application_redirect_endpoints_arr)) {
        foreach ($application_redirect_endpoints_arr as $endp) {
            array_push($endpoints, $endp["value"]);
        }
    }

    return $endpoints;
}

function appcreds_get_credential_ids($app): array {
    $credids = [];
    $application_credentials_refs = $app["application_credentials_refs"];

    if (isset($application_credentials_refs) && !empty($application_credentials_refs)) {
        foreach($application_credentials_refs as $credref) {
            array_push($credids, $credref["target_id"]);
        }
    }

    return $credids;
}

function parse_credential_ids($app_credential_urls): array {
    $credids = [];

    if (isset($app_credential_urls) && !empty($app_credential_urls)) {

        foreach ($app_credential_urls as $credurl) {

            $pos = strrpos($credurl, 'credentials/');
            if ($pos === false) {
                continue;
            }

            $credid = substr($credurl, $pos);
            if ($credid === false) {
                continue;
            }

            if (strlen($credid) > strlen('credentials/')) {

                // last url component is creadential id
                $cid = substr($credid, strlen('credentials/'));
                if ($cid !== false) {
                    array_push($credids, $cid);
                }
            }
        }
    }

    return $credids;
}

/**
 * @param string $appname
 * @param string $clientid
 * @param string $clientsecret
 * @param array $redirectendpoints
 * @param string $credid
 * @return array
 * (bool ok, $tokenkey, $regtoken)
 */
function appcreds_client_create($appname, $clientid, $clientsecret, $redirectendpoints, $credid): array {

    // client registration request
    $rh = [];

    $rh['name'] = make_registration_access_token_key($appname, $clientid);
    $rh['clientId'] = isset($clientid) ? $clientid : '';
    $rh['secret'] = isset($clientsecret) ? $clientsecret : '';
    $rh['redirectUris'] = isset($redirectendpoints) ? $redirectendpoints : [];

    // get access token (bearer or initial)
    $tokenarr = access_token();
    if (empty($tokenarr)) return array(false, "", "");

    $access_token = $tokenarr['access_token'];
    if (!isset($access_token)) {
        appcreds_sync_log_error('@f: initial access token required for dynamic oauth client registration, app-name=@appname, client-id=@cid',
            ['@f' => __FUNCTION__, '@appname' => $appname, '@cid' => $clientid]);
        return array(false, "", "");
    }

    // call client registration service
    $resp = appcreds_dyna_client_create($rh, $access_token);
    if (empty($resp)) return array(false, "", "");

    $regtoken = $resp['registrationAccessToken'];
    if (!isset($regtoken)) {
        appcreds_sync_log_error('@f: registration access token required for dynamic oauth client registration, app-name=@appname, client-id=@cid',
            ['@f' => __FUNCTION__, '@appname' => $appname, '@cid' => $clientid]);
        return array(false, "", "");
    }

    // save registration token
    $tokenkey = make_registration_access_token_key($appname, $clientid);
    save_registration_access_token($tokenkey, $regtoken);

    // save client-id
    $credkey = make_credentials_key($appname, $credid);
    save_credentials_clientid($credkey, $clientid);

    return array(true, $tokenkey, $regtoken);
}

/**
 * @param string $appname
 * @param string  $clientid
 * @param string $credid
 * @param array &$debugdata
 * @return array
 * (bool ok, string $tokenkey, string $token)
 */
function appcreds_client_delete($appname, $clientid, $credid, &$debugdata): array {
    $tokenkey = make_registration_access_token_key($appname, $clientid);

    $token = get_registration_access_token($tokenkey);
    if (!isset($token)) {
        appcreds_sync_log_error(sprintf('%s: failed to get registration token, tokenkey = %s', __FUNCTION__, $tokenkey));
        return array(false, "", "");
    }

    if (apic_addon_appcreds_sync_test()) {
        $tk = [];
        $tk['tokenkey'] = $tokenkey;
        $tk['token'] = $token;
        array_push($debugdata, $tk);
    }

    // call client delete, pass reg access token
    $isok = appcreds_dyna_client_delete($clientid, $token);
    if (!$isok) {
        appcreds_sync_log_error(sprintf("%s: invocation to delete dynamic client failed... client-id = %s, registration-token = %s", __FUNCTION__, $clientid, $token));
    }

    // delete access token
    delete_registration_access_token($tokenkey);

    // delete client-id
    $credkey = make_credentials_key($appname, $credid);
    delete_credentials_clientid($credkey);

    if (apic_addon_appcreds_sync_test()) {
        $deb = [];
        $deb['credkey'] = $credkey;
        array_push($debugdata, $deb);
    }

    return array(true, $tokenkey, $token);
}
